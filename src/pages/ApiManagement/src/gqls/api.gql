fragment ApiTypeParts on ApiType {
  id
  name
  note
  parent{
      id
      name
  }
}
# 获取树数据
query apiTypes {
    apiTypes{
      ...ApiTypeParts
    }
}

# 获取带有interfaces树数据
query apiTreeTypes {
    apiTypes {
      ...ApiTypeParts
      interfaces{
        id
        name
      }
    }
}


#创建模块
mutation createApiTypeManage($input: CreateApiTypeInput) {
  createApiTypeManage(input: $input) {
    id
  }
}

# 修改模块
mutation updateApiTypeManage($id: ID!, $input: UpdateApiTypeInput) {
  updateApiTypeManage(id: $id, input: $input) {
    id
  }
}

# 删除模块
mutation deleteApiTypeManage($id: ID!) {
  deleteApiTypeManage(id: $id)
}

# 获取服务管理列表数据
# query services {
#     services{
#       id
#       name
#       status{
#           graphql
#           health
#       }
#       endpoints{
#           graphql
#           development_graphql
#       }
#     }
# }

query services($filter: ServiceFilterInput) {
    services(filter: $filter){
      id
      name
      host
      endpoints{
          graphql
          development_graphql
      }
    }
}

#创建服务
mutation createService($input: ServiceInput) {
  createService(input: $input) {
    id
  }
}

# 修改服务
mutation updateService($id: ID!, $input: ServiceUpdateInput!) {
  updateService(id: $id, input: $input) {
    id
  }
}

# 删除服务
mutation removeService($id: ID!) {
  removeService(id: $id)
}

# 获取API委托列表数据
query delegates($filter: DelegateFilterInput) {
    delegates(filter: $filter){
        id
        name
        type
        service {
            id
            name
        }
        rule {
            reject
            query
            args
            path
            method
            parameter
        }
    }
}

#创建API委托
mutation createGraphQLDelegateDefinition($input: GraphQLDelegateInput) {
  createGraphQLDelegateDefinition(input: $input) {
    id
    name
  }
}

# 修改api委托
mutation updateGraphQLDelegateDefinition($id: ID!, $input: GraphQLDelegateInput) {
  updateGraphQLDelegateDefinition(id: $id, input: $input) {
    id
  }
}

# 删除api服务
mutation removeGraphQLDelegateDefinition($id: ID!) {
  removeGraphQLDelegateDefinition(id: $id)
}

# 获取类型列表数据
query typeDefinitions($filter: TypeDefinitionFilter) {
    typeDefinitions(filter: $filter) {
        name
        description
        title
        kind
        enumerations {
            id
            name
            deprecated
            description
        }
        types {
            name
        }
        interfaces {
          name
        }
        types {
          name
        }
    }
}


#创建类型
mutation createGraphQLTypeDefinition($input: GraphQLTypeDefinitionCreateInput!) {
  createGraphQLTypeDefinition(input: $input) {
    id
  }
}

#修改类型
mutation updateGraphQLTypeDefinition($id: ID!, $input: GraphQLTypeDefinitionUpdateInput!) {
  updateGraphQLTypeDefinition(id: $id, input: $input) {
    id
  }
}

# 删除类型
mutation removeGraphQLTypeDefinition($id: ID!) {
  removeGraphQLTypeDefinition(id: $id)
}

# 获取属性列表数据
query schema($id: ID!){
  schema(id: "master"){
    type(id: $id){
      id
      name
      title
      description
      kind
      interfaces {
        name
      }
      types {
        name
      }
      enumerations{
        id
        name
        deprecated
        description
      }
      fileds {
          id
          name
          title
          tags
          description
          defaultValue
          deprecated
          kind {
            name
          }
          delegate {
            id
            name
          }
          type {
            repeated
            required
            kind {
              id
              name
            }
          }
          arguments {
            id
            name
            description
            defaultValue
            type {
              repeated
              required
              kind {
                id
              }
            }
          }
      }
    }
  }
}

# 获取属性每项数据
query itemSchema($id: ID!){
  schema(id: "master"){
     api(id: $id){
      id
      name
      title
      kind{
        id
        name
        title
        description
      }
      type{
        id
      }
      tags
      deprecated
      domain
      description
      defaultValue
    }
  }
}

# 新增属性
mutation createGraphQLFieldDefinition($schema: ID!, $rootType: ID!, $input: GraphQLFieldDefinitionCreateInput!) {
  createGraphQLFieldDefinition(schema: $schema, rootType: $rootType, input: $input) {
    id
  }
}

# 修改属性
mutation updateGraphQLFieldDefinition($id: ID!, $input: GraphQLFieldDefinitionUpdateInput!) {
  updateGraphQLFieldDefinition(id: $id, input: $input) {
    id
  }
}

# 删除属性
mutation removeGraphQLFieldDefinition($id: ID!) {
  removeGraphQLFieldDefinition(id: $id)
}


# 获取指令管理列表数据
query directiveDefinitions($filter: GraphQLDirectiveFilter) {
    directiveDefinitions(filter: $filter){
        name
        inputs {
          name
          type
        }
        defaults {
          name
          value
        }
        overrides
    }
}


query apiType($id: ID!) {
    apiType(id: $id){
        id
        name
        note
        createdAt
        updatedAt
        parent{
            id
            name
        }
        interfaces{
            id
            name
            describe
            debug
            method
            icon
            graphql{
                method
                interface{
                    id
                    name
                    title
                    kind{
                        id
                        name
                        title
                        description
                    }
                }
            }
            type{
                id
                name
                note
            }
        }
    }
}

query api($id:ID!){
  api(id: $id){
    id
    name
    debug
    describe
    icon
    type{
      id
      name
    }
    graphql{
        method
        interface{
            id
            name
            title
            tags
            description
            defaultValue
            deprecated
            delegate {
              id
            }
            arguments{
                id
                name
                description
                defaultValue
                # 请求参数的返回类型
                type{
                    # 是否为数组
                    repeated
                    # 是否必填
                    required
                    # 请求参数返回类型
                    kind{
                        id
                        name
                        fileds{
                            id
                            name
                            title
                        }
                    }
                }
            }
            # 接口返回类型
            type{
                # 是否为数组
                repeated
                # 是否必填
                required
                # 返回类型对应的字段
                kind{
                    id
                    fileds{
                        id
                        name
                        description
                        arguments{
                            id
                            name
                        }
                        # 返回字段的类型
                        type{
                            repeated
                            required
                            kind{
                                id
                                name
                                fileds{
                                    id
                                    name
                                    title
                                }
                            }
                        }
                    }
                }
            }
        }
    }
  }
}

# 获取值类型的详情
query typeDefinition($id: ID!) {
    typeDefinition(id: $id){
        id
        name: title
        describe: description
        kind
        fileds{
            id
            name
            description
            defaultValue
            arguments{
                id
                name
            }
            type{
                repeated
                required
                kind{
                    id
                    name
                    fileds{
                        id
                        name: title
                    }
                }
            }
        }
    }
}

# 点击名称调用的接口
query fieldDefinition($id: ID!) {
    fieldDefinition(id: $id){
        id
        name:title
        describe:description
        arguments{
            id
            name
            description
            defaultValue
            # 请求参数的返回类型
            type{
                # 是否为数组
                repeated
                # 是否必填
                required
                # 请求参数返回类型
                kind{
                    id
                    name
                    fileds{
                        id
                    }
                }
            }
        }
        type{
            kind{
                id
                name
                fileds{
                    id
                    name
                    description
                    arguments{
                        id
                        name
                    }
                    # 返回字段的类型
                    type{
                        repeated
                        required
                        kind{
                            id
                            name
                            fileds{
                                id
                            }
                        }
                    }
                }
            }
        }
    }
}


# 新建模块
mutation createApplication($input: ApplicationCreateInput!) {
  createApplication(input: $input) {
    name
    path
  }
}

query schemaApis{
  schema(id: "master"){
    apis{
      id
      name
    }
  }
}

mutation bindApi($fields: [ID]!, $apiType: ID!){
  bindApi(fields: $fields, apiType: $apiType)
}